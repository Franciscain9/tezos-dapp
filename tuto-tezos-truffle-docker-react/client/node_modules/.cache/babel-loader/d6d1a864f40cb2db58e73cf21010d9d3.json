{"ast":null,"code":"import { isValidPrefix, b58cdecode, prefix, b58cencode, buf2hex } from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\n\nvar TezBridgeSigner =\n/** @class */\nfunction () {\n  function TezBridgeSigner() {\n    if (typeof tezbridge === 'undefined') {\n      throw new Error('tezbridge plugin could not be detected in your browser');\n    }\n  }\n\n  TezBridgeSigner.prototype.publicKeyHash = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , tezbridge.request({\n          method: 'get_source'\n        })];\n      });\n    });\n  };\n\n  TezBridgeSigner.prototype.publicKey = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Public key cannot be exposed');\n      });\n    });\n  };\n\n  TezBridgeSigner.prototype.secretKey = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Secret key cannot be exposed');\n      });\n    });\n  };\n\n  TezBridgeSigner.prototype.sign = function (bytes, _watermark) {\n    return __awaiter(this, void 0, void 0, function () {\n      var prefixSig, pref, decoded;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , tezbridge.request({\n              method: 'raw_sign',\n              bytes: bytes\n            })];\n\n          case 1:\n            prefixSig = _a.sent();\n            pref = prefixSig.substr(0, 5);\n\n            if (!isValidPrefix(pref)) {\n              throw new Error('Unsupported signature given by tezbridge: ' + prefixSig);\n            }\n\n            decoded = b58cdecode(prefixSig, prefix[pref]);\n            return [2\n            /*return*/\n            , {\n              bytes: bytes,\n              sig: b58cencode(decoded, prefix.sig),\n              prefixSig: prefixSig,\n              sbytes: bytes + buf2hex(toBuffer(decoded))\n            }];\n        }\n      });\n    });\n  };\n\n  return TezBridgeSigner;\n}();\n\nexport { TezBridgeSigner };","map":{"version":3,"sources":["../src/taquito-tezbridge-signer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAME,WAAA,eAAA,GAAA;AACE,QAAI,OAAO,SAAP,KAAqB,WAAzB,EAAsC;AACpC,YAAM,IAAI,KAAJ,CAAU,wDAAV,CAAN;AACD;AACF;;AAEK,EAAA,eAAA,CAAA,SAAA,CAAA,aAAA,GAAN,YAAA;;;AACE,eAAA,CAAA;AAAA;AAAA,UAAO,SAAS,CAAC,OAAV,CAAkB;AAAE,UAAA,MAAM,EAAE;AAAV,SAAlB,CAAP,CAAA;;;AACD,GAFK;;AAIA,EAAA,eAAA,CAAA,SAAA,CAAA,SAAA,GAAN,YAAA;;;AACE,cAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;;;AACD,GAFK;;AAIA,EAAA,eAAA,CAAA,SAAA,CAAA,SAAA,GAAN,YAAA;;;AACE,cAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;;;AACD,GAFK;;AAIA,EAAA,eAAA,CAAA,SAAA,CAAA,IAAA,GAAN,UAAW,KAAX,EAA0B,UAA1B,EAAiD;;;;;;AAC7B,mBAAA,CAAA;AAAA;AAAA,cAAM,SAAS,CAAC,OAAV,CAAkB;AACxC,cAAA,MAAM,EAAE,UADgC;AAExC,cAAA,KAAK,EAAA;AAFmC,aAAlB,CAAN,CAAA;;;AAAZ,YAAA,SAAS,GAAG,EAAA,CAAA,IAAA,EAAZ;AAKA,YAAA,IAAI,GAAG,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,CAApB,CAAP;;AAEN,gBAAI,CAAC,aAAa,CAAC,IAAD,CAAlB,EAA0B;AACxB,oBAAM,IAAI,KAAJ,CAAU,+CAA+C,SAAzD,CAAN;AACD;;AAEK,YAAA,OAAO,GAAG,UAAU,CAAC,SAAD,EAAY,MAAM,CAAC,IAAD,CAAlB,CAApB;AAEN,mBAAA,CAAA;AAAA;AAAA,cAAO;AACL,cAAA,KAAK,EAAA,KADA;AAEL,cAAA,GAAG,EAAE,UAAU,CAAC,OAAD,EAAU,MAAM,CAAC,GAAjB,CAFV;AAGL,cAAA,SAAS,EAAA,SAHJ;AAIL,cAAA,MAAM,EAAE,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAD,CAAT;AAJlB,aAAP,CAAA;;;;AAMD,GApBK;;AAqBR,SAAA,eAAA;AAAC,C","sourcesContent":["import { b58cdecode, b58cencode, buf2hex, prefix, isValidPrefix } from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\n\ndeclare var tezbridge: any;\n\nexport class TezBridgeSigner {\n  constructor() {\n    if (typeof tezbridge === 'undefined') {\n      throw new Error('tezbridge plugin could not be detected in your browser');\n    }\n  }\n\n  async publicKeyHash(): Promise<string> {\n    return tezbridge.request({ method: 'get_source' });\n  }\n\n  async publicKey(): Promise<string> {\n    throw new Error('Public key cannot be exposed');\n  }\n\n  async secretKey(): Promise<string> {\n    throw new Error('Secret key cannot be exposed');\n  }\n\n  async sign(bytes: string, _watermark?: Uint8Array) {\n    const prefixSig = await tezbridge.request({\n      method: 'raw_sign',\n      bytes, // Any operation bytes as string\n    });\n\n    const pref = prefixSig.substr(0, 5);\n\n    if (!isValidPrefix(pref)) {\n      throw new Error('Unsupported signature given by tezbridge: ' + prefixSig);\n    }\n\n    const decoded = b58cdecode(prefixSig, prefix[pref]);\n\n    return {\n      bytes,\n      sig: b58cencode(decoded, prefix.sig),\n      prefixSig,\n      sbytes: bytes + buf2hex(toBuffer(decoded)),\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}