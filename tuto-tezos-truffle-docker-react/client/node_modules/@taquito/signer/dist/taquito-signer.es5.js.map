{"version":3,"file":"taquito-signer.es5.js","sources":["../src/ed-key.ts","../src/ec-key.ts","../src/taquito-signer.ts"],"sourcesContent":["import sodium from 'libsodium-wrappers';\nimport { b58cencode, b58cdecode, prefix, buf2hex, Prefix, isValidPrefix } from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\n\n/**\n * @description Provide signing logic for ed25519 curve based key (tz1)\n */\nexport class Tz1 {\n  private _key: Uint8Array;\n  private _publicKey: Uint8Array;\n  private isInit: Promise<boolean>;\n\n  /**\n   *\n   * @param key Encoded private key\n   * @param encrypted Is the private key encrypted\n   * @param decrypt Decrypt function\n   */\n  constructor(private key: string, encrypted: boolean, decrypt: (k: any) => any) {\n    const keyPrefix = key.substr(0, encrypted ? 5 : 4);\n    if (!isValidPrefix(keyPrefix)) {\n      throw new Error('key contains invalid prefix');\n    }\n\n    this._key = decrypt(b58cdecode(this.key, prefix[keyPrefix]));\n    this._publicKey = this._key.slice(32);\n\n    if (!this._key) {\n      throw new Error('Unable to decode key');\n    }\n\n    this.isInit = this.init();\n  }\n\n  private async init() {\n    await sodium.ready;\n    if (this._key.length !== 64) {\n      const { publicKey, privateKey } = sodium.crypto_sign_seed_keypair(\n        new Uint8Array(this._key),\n        'uint8array'\n      );\n      this._publicKey = publicKey;\n      this._key = privateKey;\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param bytes Bytes to sign\n   * @param bytesHash Blake2b hash of the bytes to sign\n   */\n  async sign(bytes: string, bytesHash: Uint8Array) {\n    await this.isInit;\n    const signature = sodium.crypto_sign_detached(\n      new Uint8Array(bytesHash),\n      new Uint8Array(this._key)\n    );\n    const signatureBuffer = toBuffer(signature);\n    const sbytes = bytes + buf2hex(signatureBuffer);\n\n    return {\n      bytes,\n      sig: b58cencode(signature, prefix.sig),\n      prefixSig: b58cencode(signature, prefix.edsig),\n      sbytes,\n    };\n  }\n\n  /**\n   * @returns Encoded public key\n   */\n  async publicKey(): Promise<string> {\n    await this.isInit;\n    return b58cencode(this._publicKey, prefix['edpk']);\n  }\n\n  /**\n   * @returns Encoded public key hash\n   */\n  async publicKeyHash(): Promise<string> {\n    await this.isInit;\n    await sodium.ready;\n    return b58cencode(sodium.crypto_generichash(20, new Uint8Array(this._publicKey)), prefix.tz1);\n  }\n\n  /**\n   * @returns Encoded private key\n   */\n  async secretKey(): Promise<string> {\n    await this.isInit;\n    await sodium.ready;\n    let key = this._key;\n    const { privateKey } = sodium.crypto_sign_seed_keypair(\n      new Uint8Array(key).slice(0, 32),\n      'uint8array'\n    );\n    key = toBuffer(privateKey);\n\n    return b58cencode(key, prefix[`edsk`]);\n  }\n}\n","import sodium from 'libsodium-wrappers';\nimport { b58cencode, b58cdecode, prefix, buf2hex, Prefix, isValidPrefix } from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\nimport elliptic from 'elliptic';\n\nconst pref = {\n  p256: {\n    pk: prefix['p2pk'],\n    sk: prefix['p2sk'],\n    pkh: prefix.tz3,\n    sig: prefix.p2sig,\n  },\n  secp256k1: {\n    pk: prefix['sppk'],\n    sk: prefix['spsk'],\n    pkh: prefix.tz2,\n    sig: prefix.spsig,\n  },\n};\n\n/**\n * @description Provide signing logic for elliptic curve based key (tz2, tz3)\n */\nexport class ECKey {\n  private _key: Uint8Array;\n  private _publicKey: Uint8Array;\n\n  /**\n   *\n   * @param curve Curve to use with the key\n   * @param key Encoded private key\n   * @param encrypted Is the private key encrypted\n   * @param decrypt Decrypt function\n   */\n  constructor(\n    private curve: 'p256' | 'secp256k1',\n    private key: string,\n    encrypted: boolean,\n    decrypt: (k: any) => any\n  ) {\n    const keyPrefix = key.substr(0, encrypted ? 5 : 4);\n    if (!isValidPrefix(keyPrefix)) {\n      throw new Error('key contains invalid prefix');\n    }\n\n    this._key = decrypt(b58cdecode(this.key, prefix[keyPrefix]));\n    const keyPair = new elliptic.ec(this.curve).keyFromPrivate(this._key);\n    const pref =\n      keyPair\n        .getPublic()\n        .getY()\n        .toArray()[31] % 2\n        ? 3\n        : 2;\n    this._publicKey = toBuffer(\n      new Uint8Array(\n        [pref].concat(\n          keyPair\n            .getPublic()\n            .getX()\n            .toArray()\n        )\n      )\n    );\n  }\n\n  /**\n   *\n   * @param bytes Bytes to sign\n   * @param bytesHash Blake2b hash of the bytes to sign\n   */\n  async sign(bytes: string, bytesHash: Uint8Array) {\n    const key = new elliptic.ec(this.curve).keyFromPrivate(this._key);\n    const sig = key.sign(bytesHash, { canonical: true });\n    const signature = new Uint8Array(sig.r.toArray().concat(sig.s.toArray()));\n    const signatureBuffer = toBuffer(signature);\n    const sbytes = bytes + buf2hex(signatureBuffer);\n\n    return {\n      bytes,\n      sig: b58cencode(signature, prefix.sig),\n      prefixSig: b58cencode(signature, pref[this.curve].sig),\n      sbytes,\n    };\n  }\n\n  /**\n   * @returns Encoded public key\n   */\n  async publicKey(): Promise<string> {\n    return b58cencode(this._publicKey, pref[this.curve].pk);\n  }\n\n  /**\n   * @returns Encoded public key hash\n   */\n  async publicKeyHash(): Promise<string> {\n    await sodium.ready;\n    return b58cencode(\n      sodium.crypto_generichash(20, new Uint8Array(this._publicKey)),\n      pref[this.curve].pkh\n    );\n  }\n\n  /**\n   * @returns Encoded private key\n   */\n  async secretKey(): Promise<string> {\n    let key = this._key;\n\n    return b58cencode(key, pref[this.curve].sk);\n  }\n}\n\n/**\n * @description Tz3 key class using the p256 curve\n */\nexport const Tz3 = ECKey.bind(null, 'p256');\n\n/**\n * @description Tz3 key class using the secp256k1 curve\n */\nexport const Tz2 = ECKey.bind(null, 'secp256k1');\n","import sodium from 'libsodium-wrappers';\nimport { hex2buf, mergebuf, b58cencode, prefix } from '@taquito/utils';\nimport toBuffer from 'typedarray-to-buffer';\nimport { Tz1 } from './ed-key';\nimport { Tz2, ECKey, Tz3 } from './ec-key';\nimport pbkdf2 from 'pbkdf2';\nimport { mnemonicToSeedSync } from 'bip39';\n\n/**\n * @description A local implementation of the signer. Will represent a Tezos account and be able to produce signature in its behalf\n *\n * @warn If running in production and dealing with tokens that have real value, it is strongly recommended to use a HSM backed signer so that private key material is not stored in memory or on disk\n *\n * @warn Calling this constructor directly is discouraged as it do not await for sodium library to be loaded.\n *\n * Consider doing:\n *\n * ```const sodium = require('libsodium-wrappers'); await sodium.ready;```\n *\n * The recommended usage is to use InMemorySigner.fromSecretKey('edsk', 'passphrase')\n */\nexport class InMemorySigner {\n  private _key!: Tz1 | ECKey;\n\n  static fromFundraiser(email: string, password: string, mnemonic: string) {\n    let seed = mnemonicToSeedSync(mnemonic, `${email}${password}`);\n    const key = b58cencode(seed.slice(0, 32), prefix.edsk2);\n    return new InMemorySigner(key);\n  }\n\n  static async fromSecretKey(key: string, passphrase?: string) {\n    await sodium.ready;\n    return new InMemorySigner(key, passphrase);\n  }\n\n  /**\n   *\n   * @param key Encoded private key\n   * @param passphrase Passphrase to decrypt the private key if it is encrypted\n   *\n   */\n  constructor(key: string, passphrase?: string) {\n    const encrypted = key.substring(2, 3) === 'e';\n\n    let decrypt = (k: any) => k;\n\n    if (encrypted) {\n      if (!passphrase) {\n        throw new Error('Encrypted key provided without a passphrase.');\n      }\n\n      decrypt = (constructedKey: Uint8Array) => {\n        const salt = toBuffer(constructedKey.slice(0, 8));\n        const encryptedSk = constructedKey.slice(8);\n        const encryptionKey = pbkdf2.pbkdf2Sync(passphrase, salt, 32768, 32, 'sha512');\n\n        return sodium.crypto_secretbox_open_easy(\n          new Uint8Array(encryptedSk),\n          new Uint8Array(24),\n          new Uint8Array(encryptionKey)\n        );\n      };\n    }\n\n    switch (key.substr(0, 4)) {\n      case 'edes':\n      case 'edsk':\n        this._key = new Tz1(key, encrypted, decrypt);\n        break;\n      case 'spsk':\n      case 'spes':\n        this._key = new Tz2(key, encrypted, decrypt);\n        break;\n      case 'p2sk':\n      case 'p2es':\n        this._key = new Tz3(key, encrypted, decrypt);\n        break;\n      default:\n        throw new Error('Unsupported key type');\n    }\n  }\n\n  /**\n   *\n   * @param bytes Bytes to sign\n   * @param watermark Watermark to append to the bytes\n   */\n  async sign(bytes: string, watermark?: Uint8Array) {\n    let bb = hex2buf(bytes);\n    if (typeof watermark !== 'undefined') {\n      bb = mergebuf(watermark, bb);\n    }\n\n    // Ensure sodium is ready before calling crypto_generichash otherwise the function do not exists\n    await sodium.ready;\n    const bytesHash = toBuffer(sodium.crypto_generichash(32, bb));\n\n    return this._key.sign(bytes, bytesHash);\n  }\n\n  /**\n   * @returns Encoded public key\n   */\n  async publicKey(): Promise<string> {\n    return this._key.publicKey();\n  }\n\n  /**\n   * @returns Encoded public key hash\n   */\n  async publicKeyHash(): Promise<string> {\n    return this._key.publicKeyHash();\n  }\n\n  /**\n   * @returns Encoded private key\n   */\n  async secretKey(): Promise<string> {\n    return this._key.secretKey();\n  }\n}\n"],"names":[],"mappings":"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"}