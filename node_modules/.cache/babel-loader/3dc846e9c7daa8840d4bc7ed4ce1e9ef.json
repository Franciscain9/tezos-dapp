{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\n\nconst TezosTypes = __importStar(require(\"../../../types/tezos/TezosChainTypes\"));\n\nconst TezosMessageUtil_1 = require(\"../TezosMessageUtil\");\n\nconst TezosNodeReader_1 = require(\"../TezosNodeReader\");\n\nconst TezosNodeWriter_1 = require(\"../TezosNodeWriter\");\n\nconst TezosContractUtils_1 = require(\"./TezosContractUtils\");\n\nconst TezosChainTypes_1 = require(\"../../../types/tezos/TezosChainTypes\");\n\nvar CryptonomicNameServiceHelper;\n\n(function (CryptonomicNameServiceHelper) {\n  function verifyDestination(server, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return TezosContractUtils_1.TezosContractUtils.verifyDestination(server, address, 'c020219e31ee3b462ed93c33124f117f');\n    });\n  }\n\n  CryptonomicNameServiceHelper.verifyDestination = verifyDestination;\n\n  function commitName(server, signer, keystore, contract, name, nonce, operationFee, freight, gas) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const commitRecord = `(Pair \"${name}\" (Pair ${nonce} 0x${TezosMessageUtil_1.TezosMessageUtils.writeAddress(keystore.publicKeyHash)}))`;\n      const packedCommit = TezosMessageUtil_1.TezosMessageUtils.writePackedData(commitRecord, 'record', TezosChainTypes_1.TezosParameterFormat.Michelson);\n      const hashedCommit = TezosMessageUtil_1.TezosMessageUtils.simpleHash(Buffer.from(packedCommit, 'hex'), 32);\n      const parameters = `0x${hashedCommit.toString('hex')}`;\n\n      if (!freight || !gas) {\n        const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, 0, operationFee, 6000, 500000, 'commit', parameters, TezosTypes.TezosParameterFormat.Michelson);\n\n        if (!freight) {\n          freight = Number(cost['storageCost']) || 0;\n        }\n\n        if (!gas) {\n          gas = Number(cost['gas']) + 300;\n        }\n      }\n\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, 0, operationFee, 6000, 300000, 'commit', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  CryptonomicNameServiceHelper.commitName = commitName;\n\n  function registerName(server, signer, keystore, contract, name, nonce, registrationPeriod, registrationFee, operationFee, freight, gas) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parameters = `(Pair ${registrationPeriod} (Pair \"${name}\" ${nonce}))`;\n\n      if (!freight || !gas) {\n        const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, registrationFee, operationFee, 6000, 500000, 'registerName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n\n        if (!freight) {\n          freight = Number(cost['storageCost']) || 0;\n        }\n\n        if (!gas) {\n          gas = Number(cost['gas']) + 300;\n        }\n      }\n\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, registrationFee, operationFee, 6000, 300000, 'registerName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  CryptonomicNameServiceHelper.registerName = registerName;\n\n  function updateRegistrationPeriod(server, signer, keystore, contract, name, newRegistrationPeriod, registrationFee, operationFee, freight, gas) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parameters = `(Pair \"${name}\" ${newRegistrationPeriod})`;\n\n      if (!freight || !gas) {\n        const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, registrationFee, operationFee, 1000, 100000, 'updateRegistrationPeriod', parameters, TezosTypes.TezosParameterFormat.Michelson);\n\n        if (!freight) {\n          freight = Number(cost['storageCost']) || 0;\n        }\n\n        if (!gas) {\n          gas = Number(cost['gas']) + 300;\n        }\n      }\n\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, registrationFee, operationFee, freight, gas, 'updateRegistrationPeriod', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  CryptonomicNameServiceHelper.updateRegistrationPeriod = updateRegistrationPeriod;\n\n  function setPrimaryName(server, signer, keystore, contract, name, fee, freight, gas) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parameters = `\"${name}\"`;\n\n      if (!freight || !gas) {\n        const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, 0, fee, 1000, 100000, 'setPrimaryName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n\n        if (!freight) {\n          freight = Number(cost['storageCost']) || 0;\n        }\n\n        if (!gas) {\n          gas = Number(cost['gas']) + 300;\n        }\n      }\n\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, 0, fee, freight, gas, 'deleteName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  CryptonomicNameServiceHelper.setPrimaryName = setPrimaryName;\n\n  function deleteName(server, signer, keystore, contract, name, fee, freight, gas) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const parameters = `\"${name}\"`;\n\n      if (!freight || !gas) {\n        const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, 0, fee, 1000, 100000, 'deleteName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n\n        if (!freight) {\n          freight = Number(cost['storageCost']) || 0;\n        }\n\n        if (!gas) {\n          gas = Number(cost['gas']) + 300;\n        }\n      }\n\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, 0, fee, freight, gas, 'deleteName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  CryptonomicNameServiceHelper.deleteName = deleteName;\n\n  function getNameForAddress(server, mapid, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(address, 'address'), 'hex'));\n\n      try {\n        const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n        return jsonpath_plus_1.JSONPath({\n          path: '$.string',\n          json: mapResult\n        })[0];\n      } catch (_a) {}\n\n      return '';\n    });\n  }\n\n  CryptonomicNameServiceHelper.getNameForAddress = getNameForAddress;\n\n  function getNameInfo(server, mapid, name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(name, 'string'), 'hex'));\n      const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n      return {\n        name: jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[1].string',\n          json: mapResult\n        })[0],\n        modified: Boolean(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[0].prim',\n          json: mapResult\n        })[0]),\n        owner: jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[0].string',\n          json: mapResult\n        })[0],\n        registeredAt: new Date(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[0].string',\n          json: mapResult\n        })[0]),\n        registrationPeriod: jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[1].int',\n          json: mapResult\n        })[0]\n      };\n    });\n  }\n\n  CryptonomicNameServiceHelper.getNameInfo = getNameInfo;\n\n  function getSimpleStorage(server, contract) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, contract);\n      return {\n        addressMap: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[0].args[0].int',\n          json: storageResult\n        })[0]),\n        commitmentMap: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[0].args[1].int',\n          json: storageResult\n        })[0]),\n        manager: jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[1].args[0].string',\n          json: storageResult\n        })[0],\n        interval: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[1].args[1].int',\n          json: storageResult\n        })[0]),\n        maxCommitTime: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[0].args[0].int',\n          json: storageResult\n        })[0]),\n        maxDuration: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[0].args[1].int',\n          json: storageResult\n        })[0]),\n        minCommitTime: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[0].int',\n          json: storageResult\n        })[0]),\n        nameMap: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[1].args[0].int',\n          json: storageResult\n        })[0]),\n        intervalFee: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[1].args[1].int',\n          json: storageResult\n        })[0])\n      };\n    });\n  }\n\n  CryptonomicNameServiceHelper.getSimpleStorage = getSimpleStorage;\n})(CryptonomicNameServiceHelper = exports.CryptonomicNameServiceHelper || (exports.CryptonomicNameServiceHelper = {}));","map":{"version":3,"sources":["../../../../src/chain/tezos/contracts/CryptonomicNameServiceHelper.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\nconst TezosTypes = __importStar(require(\"../../../types/tezos/TezosChainTypes\"));\nconst TezosMessageUtil_1 = require(\"../TezosMessageUtil\");\nconst TezosNodeReader_1 = require(\"../TezosNodeReader\");\nconst TezosNodeWriter_1 = require(\"../TezosNodeWriter\");\nconst TezosContractUtils_1 = require(\"./TezosContractUtils\");\nconst TezosChainTypes_1 = require(\"../../../types/tezos/TezosChainTypes\");\nvar CryptonomicNameServiceHelper;\n(function (CryptonomicNameServiceHelper) {\n    function verifyDestination(server, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return TezosContractUtils_1.TezosContractUtils.verifyDestination(server, address, 'c020219e31ee3b462ed93c33124f117f');\n        });\n    }\n    CryptonomicNameServiceHelper.verifyDestination = verifyDestination;\n    function commitName(server, signer, keystore, contract, name, nonce, operationFee, freight, gas) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const commitRecord = `(Pair \"${name}\" (Pair ${nonce} 0x${TezosMessageUtil_1.TezosMessageUtils.writeAddress(keystore.publicKeyHash)}))`;\n            const packedCommit = TezosMessageUtil_1.TezosMessageUtils.writePackedData(commitRecord, 'record', TezosChainTypes_1.TezosParameterFormat.Michelson);\n            const hashedCommit = TezosMessageUtil_1.TezosMessageUtils.simpleHash(Buffer.from(packedCommit, 'hex'), 32);\n            const parameters = `0x${hashedCommit.toString('hex')}`;\n            if (!freight || !gas) {\n                const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, 0, operationFee, 6000, 500000, 'commit', parameters, TezosTypes.TezosParameterFormat.Michelson);\n                if (!freight) {\n                    freight = Number(cost['storageCost']) || 0;\n                }\n                if (!gas) {\n                    gas = Number(cost['gas']) + 300;\n                }\n            }\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, 0, operationFee, 6000, 300000, 'commit', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    CryptonomicNameServiceHelper.commitName = commitName;\n    function registerName(server, signer, keystore, contract, name, nonce, registrationPeriod, registrationFee, operationFee, freight, gas) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parameters = `(Pair ${registrationPeriod} (Pair \"${name}\" ${nonce}))`;\n            if (!freight || !gas) {\n                const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, registrationFee, operationFee, 6000, 500000, 'registerName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n                if (!freight) {\n                    freight = Number(cost['storageCost']) || 0;\n                }\n                if (!gas) {\n                    gas = Number(cost['gas']) + 300;\n                }\n            }\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, registrationFee, operationFee, 6000, 300000, 'registerName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    CryptonomicNameServiceHelper.registerName = registerName;\n    function updateRegistrationPeriod(server, signer, keystore, contract, name, newRegistrationPeriod, registrationFee, operationFee, freight, gas) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parameters = `(Pair \"${name}\" ${newRegistrationPeriod})`;\n            if (!freight || !gas) {\n                const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, registrationFee, operationFee, 1000, 100000, 'updateRegistrationPeriod', parameters, TezosTypes.TezosParameterFormat.Michelson);\n                if (!freight) {\n                    freight = Number(cost['storageCost']) || 0;\n                }\n                if (!gas) {\n                    gas = Number(cost['gas']) + 300;\n                }\n            }\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, registrationFee, operationFee, freight, gas, 'updateRegistrationPeriod', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    CryptonomicNameServiceHelper.updateRegistrationPeriod = updateRegistrationPeriod;\n    function setPrimaryName(server, signer, keystore, contract, name, fee, freight, gas) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parameters = `\"${name}\"`;\n            if (!freight || !gas) {\n                const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, 0, fee, 1000, 100000, 'setPrimaryName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n                if (!freight) {\n                    freight = Number(cost['storageCost']) || 0;\n                }\n                if (!gas) {\n                    gas = Number(cost['gas']) + 300;\n                }\n            }\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, 0, fee, freight, gas, 'deleteName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    CryptonomicNameServiceHelper.setPrimaryName = setPrimaryName;\n    function deleteName(server, signer, keystore, contract, name, fee, freight, gas) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const parameters = `\"${name}\"`;\n            if (!freight || !gas) {\n                const cost = yield TezosNodeWriter_1.TezosNodeWriter.testContractInvocationOperation(server, 'main', keystore, contract, 0, fee, 1000, 100000, 'deleteName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n                if (!freight) {\n                    freight = Number(cost['storageCost']) || 0;\n                }\n                if (!gas) {\n                    gas = Number(cost['gas']) + 300;\n                }\n            }\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, contract, 0, fee, freight, gas, 'deleteName', parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    CryptonomicNameServiceHelper.deleteName = deleteName;\n    function getNameForAddress(server, mapid, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(address, 'address'), 'hex'));\n            try {\n                const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n                return jsonpath_plus_1.JSONPath({ path: '$.string', json: mapResult })[0];\n            }\n            catch (_a) { }\n            return '';\n        });\n    }\n    CryptonomicNameServiceHelper.getNameForAddress = getNameForAddress;\n    function getNameInfo(server, mapid, name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(name, 'string'), 'hex'));\n            const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n            return {\n                name: jsonpath_plus_1.JSONPath({ path: '$.args[0].args[1].string', json: mapResult })[0],\n                modified: Boolean(jsonpath_plus_1.JSONPath({ path: '$.args[0].args[0].prim', json: mapResult })[0]),\n                owner: jsonpath_plus_1.JSONPath({ path: '$.args[1].args[0].string', json: mapResult })[0],\n                registeredAt: new Date(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[0].string', json: mapResult })[0]),\n                registrationPeriod: jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[1].int', json: mapResult })[0]\n            };\n        });\n    }\n    CryptonomicNameServiceHelper.getNameInfo = getNameInfo;\n    function getSimpleStorage(server, contract) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, contract);\n            return {\n                addressMap: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].args[0].args[0].int', json: storageResult })[0]),\n                commitmentMap: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].args[0].args[1].int', json: storageResult })[0]),\n                manager: jsonpath_plus_1.JSONPath({ path: '$.args[0].args[1].args[0].string', json: storageResult })[0],\n                interval: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].args[1].args[1].int', json: storageResult })[0]),\n                maxCommitTime: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[0].args[0].int', json: storageResult })[0]),\n                maxDuration: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[0].args[1].int', json: storageResult })[0]),\n                minCommitTime: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[0].int', json: storageResult })[0]),\n                nameMap: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[1].args[0].int', json: storageResult })[0]),\n                intervalFee: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[1].args[1].int', json: storageResult })[0])\n            };\n        });\n    }\n    CryptonomicNameServiceHelper.getSimpleStorage = getSimpleStorage;\n})(CryptonomicNameServiceHelper = exports.CryptonomicNameServiceHelper || (exports.CryptonomicNameServiceHelper = {}));\n//# sourceMappingURL=CryptonomicNameServiceHelper.js.map"]},"metadata":{},"sourceType":"script"}