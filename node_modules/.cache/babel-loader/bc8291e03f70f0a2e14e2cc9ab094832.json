{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\n\nconst TezosTypes = __importStar(require(\"../../../../types/tezos/TezosChainTypes\"));\n\nconst TezosMessageUtil_1 = require(\"../../TezosMessageUtil\");\n\nconst TezosNodeReader_1 = require(\"../../TezosNodeReader\");\n\nconst TezosNodeWriter_1 = require(\"../../TezosNodeWriter\");\n\nconst TezosContractUtils_1 = require(\"../TezosContractUtils\");\n\nvar MultiAssetTokenHelper;\n\n(function (MultiAssetTokenHelper) {\n  function verifyDestination(server, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return TezosContractUtils_1.TezosContractUtils.verifyDestination(server, address, 'cdf4fb6303d606686694d80bd485b6a1');\n    });\n  }\n\n  MultiAssetTokenHelper.verifyDestination = verifyDestination;\n\n  function verifyScript(script) {\n    return TezosContractUtils_1.TezosContractUtils.verifyScript(script, '000');\n  }\n\n  MultiAssetTokenHelper.verifyScript = verifyScript;\n\n  function deployContract(server, signer, keystore, fee, administrator, name, symbol, tokenid, scale, pause = true, supply = 0, gas = 800000, freight = 20000) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const contract = `parameter (or (or (or (pair %balance_of (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))) (pair %mint (pair (address %address) (nat %amount)) (pair (string %symbol) (nat %token_id)))) (or (address %set_administrator) (bool %set_pause))) (or (or (pair %token_metadata (list %token_ids nat) (lambda %handler (list (pair (nat %token_id) (pair (string %symbol) (pair (string %name) (pair (nat %decimals) (map %extras string string)))))) unit)) (contract %token_metadata_regitry address)) (or (list %transfer (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) (list %update_operators (or (pair %add_operator (address %owner) (address %operator)) (pair %remove_operator (address %owner) (address %operator))))))) ;\n            storage (pair (pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat))) (pair (pair (unit %version_20200615_tzip_a57dfe86_contract) (big_map %operators (pair (address %owner) (address %operator)) unit)) (pair (bool %paused) (big_map %tokens nat (pair (pair %metadata (nat %token_id) (pair (string %symbol) (pair (string %name) (pair (nat %decimals) (map %extras string string))))) (nat %total_supply)))))) ;\n            code { DUP ; CDR ; SWAP ; CAR ; IF_LEFT { IF_LEFT { IF_LEFT { SWAP ; DUP ; DUG 2 ; { CDR ; CDR ; CAR } ; IF { PUSH string \"WrongCondition: ~ self.data.paused\" ; FAILWITH } {} ; NIL (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) ; SWAP ; DUP ; DUG 2 ; CAR ; ITER { SWAP ; DIG 3 ; DUP ; DUG 4 ; { CAR ; CDR ; CDR } ; DIG 2 ; DUP ; DUG 3 ; CDR ; DIG 3 ; DUP ; DUG 4 ; CAR ; PAIR ; GET ; { IF_NONE { PUSH string \"Get-item:190\" ; FAILWITH } {} } ; DIG 2 ; DUP ; DUG 3 ; CDR ; DIG 3 ; CAR ; PAIR %owner %token_id ; PAIR %request %balance ; CONS } ; NIL operation ; DIG 2 ; DUP ; DUG 3 ; CDR ; PUSH mutez 0 ; DIG 3 ; DUP ; DUG 4 ; NIL (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) ; SWAP ; ITER { CONS } ; DIG 4 ; DROP ; DIG 4 ; DROP ; TRANSFER_TOKENS ; CONS } { SWAP ; DUP ; DUG 2 ; { CAR ; CAR } ; SENDER ; COMPARE ; EQ ; IF {} { PUSH string \"WrongCondition: sp.sender == self.data.administrator\" ; FAILWITH } ; SWAP ; DUP ; DUG 2 ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; { CDR ; CDR } ; DIG 4 ; DUP ; DUG 5 ; { CAR ; CDR ; CAR } ; DUP ; PUSH nat 1 ; DIG 6 ; DUP ; DUG 7 ; { CDR ; CDR } ; ADD ; DUP ; DUG 2 ; COMPARE ; LE ; IF { DROP } { SWAP ; DROP } ; DIG 5 ; DROP ; PAIR ; SWAP ; PAIR ; PAIR ; SWAP ; SWAP ; DUP ; DUG 2 ; { CAR ; CDR ; CDR } ; SWAP ; DUP ; DUG 2 ; { CDR ; CDR } ; DIG 2 ; DUP ; DUG 3 ; { CAR ; CAR } ; PAIR ; MEM ; IF { SWAP ; DUP ; DUG 2 ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CDR } ; DIG 6 ; DUP ; DUG 7 ; { CAR ; CAR } ; PAIR ; DUP ; DUG 2 ; GET ; { IF_NONE { PUSH string \"set_in_top-any\" ; FAILWITH } {} } ; DROP ; DIG 5 ; DUP ; DUG 6 ; { CAR ; CDR } ; DIG 7 ; { CAR ; CDR ; CDR } ; DIG 7 ; DUP ; DUG 8 ; { CDR ; CDR } ; DIG 8 ; DUP ; DUG 9 ; { CAR ; CAR } ; PAIR ; GET ; { IF_NONE { PUSH string \"Get-item:190\" ; FAILWITH } {} } ; ADD ; SOME ; SWAP ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; PAIR ; SWAP } { SWAP ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DIG 4 ; DUP ; DUG 5 ; { CAR ; CDR } ; SOME ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CDR } ; DIG 6 ; DUP ; DUG 7 ; { CAR ; CAR } ; PAIR ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; PAIR ; SWAP } ; SWAP ; DUP ; DUG 2 ; { CDR ; CDR ; CDR } ; SWAP ; DUP ; DUG 2 ; { CDR ; CDR } ; MEM ; IF { SWAP ; DUP ; DUG 2 ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CDR } ; DUP ; DUG 2 ; GET ; { IF_NONE { PUSH string \"set_in_top-any\" ; FAILWITH } {} } ; CAR ; DIG 6 ; DUP ; DUG 7 ; { CAR ; CDR } ; DIG 8 ; { CDR ; CDR ; CDR } ; DIG 8 ; DUP ; DUG 9 ; { CDR ; CDR } ; GET ; { IF_NONE { PUSH string \"Get-item:431\" ; FAILWITH } {} } ; CDR ; ADD ; SWAP ; PAIR ; SOME ; SWAP ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP } { SWAP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DIG 4 ; DUP ; DUG 5 ; { CAR ; CDR } ; PUSH (pair (string %name) (pair (nat %decimals) (map %extras string string))) (Pair \"\" (Pair 0 {})) ; DIG 6 ; DUP ; DUG 7 ; { CDR ; CAR } ; PAIR %symbol ; DIG 6 ; DUP ; DUG 7 ; { CDR ; CDR } ; PAIR %token_id ; PAIR %metadata %total_supply ; SOME ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CDR } ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP } ; DROP ; NIL operation } } { IF_LEFT { SWAP ; DUP ; DUG 2 ; { CAR ; CAR } ; SENDER ; COMPARE ; EQ ; IF {} { PUSH string \"WrongCondition: sp.sender == self.data.administrator\" ; FAILWITH } ; SWAP ; DUP ; CDR ; SWAP ; { CAR ; CDR } ; DIG 2 ; PAIR ; PAIR } { SWAP ; DUP ; DUG 2 ; { CAR ; CAR } ; SENDER ; COMPARE ; EQ ; IF {} { PUSH string \"WrongCondition: sp.sender == self.data.administrator\" ; FAILWITH } ; SWAP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; { CDR ; CDR } ; DIG 3 ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR } ; NIL operation } } { IF_LEFT { IF_LEFT { SWAP ; DUP ; DUG 2 ; { CDR ; CDR ; CAR } ; IF { PUSH string \"WrongCondition: ~ self.data.paused\" ; FAILWITH } {} ; NIL (pair (nat %token_id) (pair (string %symbol) (pair (string %name) (pair (nat %decimals) (map %extras string string))))) ; SWAP ; DUP ; DUG 2 ; CAR ; ITER { SWAP ; DIG 3 ; DUP ; DUG 4 ; { CDR ; CDR ; CDR } ; DIG 2 ; GET ; { IF_NONE { PUSH string \"Get-item:523\" ; FAILWITH } {} } ; CAR ; CONS } ; SWAP ; DUP ; DUG 2 ; CDR ; SWAP ; DUP ; DUG 2 ; NIL (pair (nat %token_id) (pair (string %symbol) (pair (string %name) (pair (nat %decimals) (map %extras string string))))) ; SWAP ; ITER { CONS } ; EXEC ; DROP 3 ; NIL operation } { SWAP ; DUP ; DUG 2 ; { CDR ; CDR ; CAR } ; IF { PUSH string \"WrongCondition: ~ self.data.paused\" ; FAILWITH } {} ; DUP ; NIL operation ; SWAP ; PUSH mutez 0 ; SELF ; DIG 4 ; DROP ; ADDRESS ; TRANSFER_TOKENS ; CONS } } { IF_LEFT { SWAP ; DUP ; DUG 2 ; { CDR ; CDR ; CAR } ; IF { PUSH string \"WrongCondition: ~ self.data.paused\" ; FAILWITH } {} ; DUP ; ITER { DIG 2 ; DUP ; DUG 3 ; { CAR ; CAR } ; SENDER ; COMPARE ; EQ ; IF { PUSH bool True } { DUP ; CAR ; SENDER ; COMPARE ; EQ } ; IF { PUSH bool True } { DIG 2 ; DUP ; DUG 3 ; { CDR ; CAR ; CDR } ; SENDER ; DIG 2 ; DUP ; DUG 3 ; CAR ; PAIR %owner %operator ; MEM } ; IF {} { PUSH string \"WrongCondition: ((sp.sender == self.data.administrator) | (transfer.from_ == sp.sender)) | (self.data.operators.contains(sp.record(operator = sp.sender, owner = transfer.from_)))\" ; FAILWITH } ; DUP ; CDR ; ITER { DUP ; { CDR ; CDR } ; PUSH nat 0 ; COMPARE ; LT ; IF {} { PUSH string \"TRANSFER_OF_ZERO\" ; FAILWITH } ; DUP ; { CDR ; CDR } ; DIG 4 ; DUP ; DUG 5 ; { CAR ; CDR ; CDR } ; DIG 2 ; DUP ; DUG 3 ; { CDR ; CAR } ; DIG 4 ; DUP ; DUG 5 ; CAR ; PAIR ; GET ; { IF_NONE { PUSH string \"Get-item:190\" ; FAILWITH } {} } ; COMPARE ; GE ; IF {} { PUSH string \"WrongCondition: self.data.ledger[(transfer.from_, tx.token_id)].balance >= tx.amount\" ; FAILWITH } ; DIG 3 ; DUP ; DUG 4 ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CAR } ; DIG 7 ; DUP ; DUG 8 ; CAR ; PAIR ; DUP ; DUG 2 ; GET ; { IF_NONE { PUSH string \"set_in_top-any\" ; FAILWITH } {} } ; DROP ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CDR } ; DIG 9 ; { CAR ; CDR ; CDR } ; DIG 7 ; DUP ; DUG 8 ; { CDR ; CAR } ; DIG 9 ; DUP ; DUG 10 ; CAR ; PAIR ; GET ; { IF_NONE { PUSH string \"Get-item:190\" ; FAILWITH } {} } ; SUB ; ISNAT ; { IF_NONE { PUSH unit Unit ; FAILWITH } {} } ; SOME ; SWAP ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; PAIR ; DUG 3 ; DIG 3 ; DUP ; DUG 4 ; { CAR ; CDR ; CDR } ; SWAP ; DUP ; DUG 2 ; { CDR ; CAR } ; DIG 2 ; DUP ; DUG 3 ; CAR ; PAIR ; MEM ; IF { DIG 3 ; DUP ; DUG 4 ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CAR } ; DIG 6 ; DUP ; DUG 7 ; CAR ; PAIR ; DUP ; DUG 2 ; GET ; { IF_NONE { PUSH string \"set_in_top-any\" ; FAILWITH } {} } ; DROP ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CDR } ; DIG 9 ; { CAR ; CDR ; CDR } ; DIG 7 ; DUP ; DUG 8 ; { CDR ; CAR } ; DIG 8 ; DUP ; DUG 9 ; CAR ; PAIR ; GET ; { IF_NONE { PUSH string \"Get-item:190\" ; FAILWITH } {} } ; ADD ; SOME ; SWAP ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; PAIR ; DUG 3 } { DIG 3 ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DIG 4 ; DUP ; DUG 5 ; { CDR ; CDR } ; SOME ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CAR } ; DIG 6 ; DUP ; DUG 7 ; CAR ; PAIR ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; PAIR ; DUG 3 } ; DROP } ; DROP } ; DROP } { DUP ; ITER { DUP ; IF_LEFT { DROP ; DUP ; SENDER ; SWAP ; IF_LEFT {} { DROP ; PUSH unit Unit ; FAILWITH } ; CAR ; COMPARE ; EQ ; IF { PUSH bool True } { DIG 2 ; DUP ; DUG 3 ; { CAR ; CAR } ; SENDER ; COMPARE ; EQ } ; IF {} { PUSH string \"WrongCondition: (update.open_variant('add_operator').owner == sp.sender) | (sp.sender == self.data.administrator)\" ; FAILWITH } ; DIG 2 ; DUP ; DUG 3 ; DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; PUSH (option unit) (Some Unit) ; DIG 5 ; DUP ; DUG 6 ; IF_LEFT {} { DROP ; PUSH unit Unit ; FAILWITH } ; CDR ; DIG 6 ; DUP ; DUG 7 ; IF_LEFT {} { DROP ; PUSH unit Unit ; FAILWITH } ; DIG 9 ; DROP ; CAR ; PAIR %owner %operator ; UPDATE ; SWAP ; PAIR ; PAIR ; SWAP ; PAIR ; DUG 2 } { DROP ; DUP ; SENDER ; SWAP ; IF_LEFT { DROP ; PUSH unit Unit ; FAILWITH } {} ; CAR ; COMPARE ; EQ ; IF { PUSH bool True } { DIG 2 ; DUP ; DUG 3 ; { CAR ; CAR } ; SENDER ; COMPARE ; EQ } ; IF {} { PUSH string \"WrongCondition: (update.open_variant('remove_operator').owner == sp.sender) | (sp.sender == self.data.administrator)\" ; FAILWITH } ; DIG 2 ; DUP ; DUG 3 ; DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; NONE unit ; DIG 5 ; DUP ; DUG 6 ; IF_LEFT { DROP ; PUSH unit Unit ; FAILWITH } {} ; CDR ; DIG 6 ; DUP ; DUG 7 ; IF_LEFT { DROP ; PUSH unit Unit ; FAILWITH } {} ; DIG 9 ; DROP ; CAR ; PAIR %owner %operator ; UPDATE ; SWAP ; PAIR ; PAIR ; SWAP ; PAIR ; DUG 2 } ; DROP } ; DROP } ; NIL operation } } ; PAIR } ;`;\n      const storage = `( Pair ( Pair \"${administrator}\" ( Pair 0 { } ) ) ( Pair ( Pair Unit { } ) ( Pair ${pause ? 'True' : 'False'} { Elt ${tokenid} ( Pair ( Pair ${tokenid} ( Pair \"${symbol}\" ( Pair \"${name}\" ( Pair ${scale} { } ) ) ) ) ${supply} ) } ) ) )`;\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractOriginationOperation(server, signer, keystore, 0, undefined, fee, freight, gas, contract, storage, TezosTypes.TezosParameterFormat.Michelson);\n      return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult['operationGroupID']);\n    });\n  }\n\n  MultiAssetTokenHelper.deployContract = deployContract;\n\n  function getSimpleStorage(server, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);\n      return {\n        administrator: jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[0].string',\n          json: storageResult\n        })[0],\n        tokens: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[1].args[0].int',\n          json: storageResult\n        })[0]),\n        balanceMap: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[1].args[1].int',\n          json: storageResult\n        })[0]),\n        operatorMap: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[0].args[1].int',\n          json: storageResult\n        })[0]),\n        paused: jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[0].prim',\n          json: storageResult\n        })[0].toString().toLowerCase().startsWith('t'),\n        metadataMap: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[1].int',\n          json: storageResult\n        })[0])\n      };\n    });\n  }\n\n  MultiAssetTokenHelper.getSimpleStorage = getSimpleStorage;\n\n  function getTokenDefinition(server, mapid, token = 0) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(token, 'nat'), 'hex'));\n      const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n\n      if (mapResult === undefined) {\n        throw new Error(`Map ${mapid} does not contain a record for token ${token}`);\n      }\n\n      return {\n        tokenid: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[0].int',\n          json: mapResult\n        })[0]),\n        symbol: jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[1].args[0].string',\n          json: mapResult\n        })[0],\n        name: jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[1].args[1].args[0].string',\n          json: mapResult\n        })[0],\n        scale: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[1].args[1].args[1].args[0].int',\n          json: mapResult\n        })[0]),\n        supply: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].int',\n          json: mapResult\n        })[0])\n      };\n    });\n  }\n\n  MultiAssetTokenHelper.getTokenDefinition = getTokenDefinition;\n\n  function activate(server, address, signer, keystore, fee, gas = 800000, freight = 20000) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const entryPoint = 'set_pause';\n      const parameters = 'False';\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, address, 0, fee, freight, gas, entryPoint, parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  MultiAssetTokenHelper.activate = activate;\n\n  function deactivate(server, address, signer, keystore, fee, gas = 800000, freight = 20000) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const entryPoint = 'set_pause';\n      const parameters = 'True';\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, address, 0, fee, freight, gas, entryPoint, parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  MultiAssetTokenHelper.deactivate = deactivate;\n\n  function changeAdministrator(server, address, signer, keystore, fee, administrator, gas = 800000, freight = 20000) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const entryPoint = 'set_administrator';\n      const parameters = `\"${administrator}\"`;\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, address, 0, fee, freight, gas, entryPoint, parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  MultiAssetTokenHelper.changeAdministrator = changeAdministrator;\n\n  function mint(server, address, signer, keystore, fee, destination, balance, symbol, tokenid, gas = 800000, freight = 20000) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const entryPoint = 'mint';\n      const parameters = `(Pair (Pair \"${destination}\" ${balance}) (Pair \"${symbol}\" ${tokenid}))`;\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, address, 0, fee, freight, gas, entryPoint, parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  MultiAssetTokenHelper.mint = mint;\n\n  function transfer(server, address, signer, keystore, fee, source, transfers, gas = 800000, freight = 20000) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const entryPoint = 'transfer';\n      const parameters = `{ Pair \"${source}\" { ${transfers.map(t => '( Pair \"' + t.address + '\" ( Pair ' + t.tokenid + ' ' + t.balance + ' ) )').join(' ; ')} } }`;\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, address, 0, fee, freight, gas, entryPoint, parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  MultiAssetTokenHelper.transfer = transfer;\n\n  function getAccountBalance(server, mapid, account, tokenid) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accountHex = `0x${TezosMessageUtil_1.TezosMessageUtils.writeAddress(account)}`;\n      const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(`(Pair ${accountHex} ${tokenid})`, '', TezosTypes.TezosParameterFormat.Michelson), 'hex'));\n      const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n\n      if (mapResult === undefined) {\n        throw new Error(`Map ${mapid} does not contain a record for ${account}/${tokenid}`);\n      }\n\n      const jsonresult = jsonpath_plus_1.JSONPath({\n        path: '$.int',\n        json: mapResult\n      });\n      return Number(jsonresult[0]);\n    });\n  }\n\n  MultiAssetTokenHelper.getAccountBalance = getAccountBalance;\n})(MultiAssetTokenHelper = exports.MultiAssetTokenHelper || (exports.MultiAssetTokenHelper = {}));","map":{"version":3,"sources":["../../../../../src/chain/tezos/contracts/tzip12/MultiAssetTokenHelper.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\nconst TezosTypes = __importStar(require(\"../../../../types/tezos/TezosChainTypes\"));\nconst TezosMessageUtil_1 = require(\"../../TezosMessageUtil\");\nconst TezosNodeReader_1 = require(\"../../TezosNodeReader\");\nconst TezosNodeWriter_1 = require(\"../../TezosNodeWriter\");\nconst TezosContractUtils_1 = require(\"../TezosContractUtils\");\nvar MultiAssetTokenHelper;\n(function (MultiAssetTokenHelper) {\n    function verifyDestination(server, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return TezosContractUtils_1.TezosContractUtils.verifyDestination(server, address, 'cdf4fb6303d606686694d80bd485b6a1');\n        });\n    }\n    MultiAssetTokenHelper.verifyDestination = verifyDestination;\n    function verifyScript(script) {\n        return TezosContractUtils_1.TezosContractUtils.verifyScript(script, '000');\n    }\n    MultiAssetTokenHelper.verifyScript = verifyScript;\n    function deployContract(server, signer, keystore, fee, administrator, name, symbol, tokenid, scale, pause = true, supply = 0, gas = 800000, freight = 20000) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const contract = `parameter (or (or (or (pair %balance_of (list %requests (pair (address %owner) (nat %token_id))) (contract %callback (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance))))) (pair %mint (pair (address %address) (nat %amount)) (pair (string %symbol) (nat %token_id)))) (or (address %set_administrator) (bool %set_pause))) (or (or (pair %token_metadata (list %token_ids nat) (lambda %handler (list (pair (nat %token_id) (pair (string %symbol) (pair (string %name) (pair (nat %decimals) (map %extras string string)))))) unit)) (contract %token_metadata_regitry address)) (or (list %transfer (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) (list %update_operators (or (pair %add_operator (address %owner) (address %operator)) (pair %remove_operator (address %owner) (address %operator))))))) ;\n            storage (pair (pair (address %administrator) (pair (nat %all_tokens) (big_map %ledger (pair address nat) nat))) (pair (pair (unit %version_20200615_tzip_a57dfe86_contract) (big_map %operators (pair (address %owner) (address %operator)) unit)) (pair (bool %paused) (big_map %tokens nat (pair (pair %metadata (nat %token_id) (pair (string %symbol) (pair (string %name) (pair (nat %decimals) (map %extras string string))))) (nat %total_supply)))))) ;\n            code { DUP ; CDR ; SWAP ; CAR ; IF_LEFT { IF_LEFT { IF_LEFT { SWAP ; DUP ; DUG 2 ; { CDR ; CDR ; CAR } ; IF { PUSH string \"WrongCondition: ~ self.data.paused\" ; FAILWITH } {} ; NIL (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) ; SWAP ; DUP ; DUG 2 ; CAR ; ITER { SWAP ; DIG 3 ; DUP ; DUG 4 ; { CAR ; CDR ; CDR } ; DIG 2 ; DUP ; DUG 3 ; CDR ; DIG 3 ; DUP ; DUG 4 ; CAR ; PAIR ; GET ; { IF_NONE { PUSH string \"Get-item:190\" ; FAILWITH } {} } ; DIG 2 ; DUP ; DUG 3 ; CDR ; DIG 3 ; CAR ; PAIR %owner %token_id ; PAIR %request %balance ; CONS } ; NIL operation ; DIG 2 ; DUP ; DUG 3 ; CDR ; PUSH mutez 0 ; DIG 3 ; DUP ; DUG 4 ; NIL (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)) ; SWAP ; ITER { CONS } ; DIG 4 ; DROP ; DIG 4 ; DROP ; TRANSFER_TOKENS ; CONS } { SWAP ; DUP ; DUG 2 ; { CAR ; CAR } ; SENDER ; COMPARE ; EQ ; IF {} { PUSH string \"WrongCondition: sp.sender == self.data.administrator\" ; FAILWITH } ; SWAP ; DUP ; DUG 2 ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; { CDR ; CDR } ; DIG 4 ; DUP ; DUG 5 ; { CAR ; CDR ; CAR } ; DUP ; PUSH nat 1 ; DIG 6 ; DUP ; DUG 7 ; { CDR ; CDR } ; ADD ; DUP ; DUG 2 ; COMPARE ; LE ; IF { DROP } { SWAP ; DROP } ; DIG 5 ; DROP ; PAIR ; SWAP ; PAIR ; PAIR ; SWAP ; SWAP ; DUP ; DUG 2 ; { CAR ; CDR ; CDR } ; SWAP ; DUP ; DUG 2 ; { CDR ; CDR } ; DIG 2 ; DUP ; DUG 3 ; { CAR ; CAR } ; PAIR ; MEM ; IF { SWAP ; DUP ; DUG 2 ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CDR } ; DIG 6 ; DUP ; DUG 7 ; { CAR ; CAR } ; PAIR ; DUP ; DUG 2 ; GET ; { IF_NONE { PUSH string \"set_in_top-any\" ; FAILWITH } {} } ; DROP ; DIG 5 ; DUP ; DUG 6 ; { CAR ; CDR } ; DIG 7 ; { CAR ; CDR ; CDR } ; DIG 7 ; DUP ; DUG 8 ; { CDR ; CDR } ; DIG 8 ; DUP ; DUG 9 ; { CAR ; CAR } ; PAIR ; GET ; { IF_NONE { PUSH string \"Get-item:190\" ; FAILWITH } {} } ; ADD ; SOME ; SWAP ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; PAIR ; SWAP } { SWAP ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DIG 4 ; DUP ; DUG 5 ; { CAR ; CDR } ; SOME ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CDR } ; DIG 6 ; DUP ; DUG 7 ; { CAR ; CAR } ; PAIR ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; PAIR ; SWAP } ; SWAP ; DUP ; DUG 2 ; { CDR ; CDR ; CDR } ; SWAP ; DUP ; DUG 2 ; { CDR ; CDR } ; MEM ; IF { SWAP ; DUP ; DUG 2 ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CDR } ; DUP ; DUG 2 ; GET ; { IF_NONE { PUSH string \"set_in_top-any\" ; FAILWITH } {} } ; CAR ; DIG 6 ; DUP ; DUG 7 ; { CAR ; CDR } ; DIG 8 ; { CDR ; CDR ; CDR } ; DIG 8 ; DUP ; DUG 9 ; { CDR ; CDR } ; GET ; { IF_NONE { PUSH string \"Get-item:431\" ; FAILWITH } {} } ; CDR ; ADD ; SWAP ; PAIR ; SOME ; SWAP ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP } { SWAP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DIG 4 ; DUP ; DUG 5 ; { CAR ; CDR } ; PUSH (pair (string %name) (pair (nat %decimals) (map %extras string string))) (Pair \"\" (Pair 0 {})) ; DIG 6 ; DUP ; DUG 7 ; { CDR ; CAR } ; PAIR %symbol ; DIG 6 ; DUP ; DUG 7 ; { CDR ; CDR } ; PAIR %token_id ; PAIR %metadata %total_supply ; SOME ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CDR } ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR ; SWAP } ; DROP ; NIL operation } } { IF_LEFT { SWAP ; DUP ; DUG 2 ; { CAR ; CAR } ; SENDER ; COMPARE ; EQ ; IF {} { PUSH string \"WrongCondition: sp.sender == self.data.administrator\" ; FAILWITH } ; SWAP ; DUP ; CDR ; SWAP ; { CAR ; CDR } ; DIG 2 ; PAIR ; PAIR } { SWAP ; DUP ; DUG 2 ; { CAR ; CAR } ; SENDER ; COMPARE ; EQ ; IF {} { PUSH string \"WrongCondition: sp.sender == self.data.administrator\" ; FAILWITH } ; SWAP ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; { CDR ; CDR } ; DIG 3 ; PAIR ; SWAP ; PAIR ; SWAP ; PAIR } ; NIL operation } } { IF_LEFT { IF_LEFT { SWAP ; DUP ; DUG 2 ; { CDR ; CDR ; CAR } ; IF { PUSH string \"WrongCondition: ~ self.data.paused\" ; FAILWITH } {} ; NIL (pair (nat %token_id) (pair (string %symbol) (pair (string %name) (pair (nat %decimals) (map %extras string string))))) ; SWAP ; DUP ; DUG 2 ; CAR ; ITER { SWAP ; DIG 3 ; DUP ; DUG 4 ; { CDR ; CDR ; CDR } ; DIG 2 ; GET ; { IF_NONE { PUSH string \"Get-item:523\" ; FAILWITH } {} } ; CAR ; CONS } ; SWAP ; DUP ; DUG 2 ; CDR ; SWAP ; DUP ; DUG 2 ; NIL (pair (nat %token_id) (pair (string %symbol) (pair (string %name) (pair (nat %decimals) (map %extras string string))))) ; SWAP ; ITER { CONS } ; EXEC ; DROP 3 ; NIL operation } { SWAP ; DUP ; DUG 2 ; { CDR ; CDR ; CAR } ; IF { PUSH string \"WrongCondition: ~ self.data.paused\" ; FAILWITH } {} ; DUP ; NIL operation ; SWAP ; PUSH mutez 0 ; SELF ; DIG 4 ; DROP ; ADDRESS ; TRANSFER_TOKENS ; CONS } } { IF_LEFT { SWAP ; DUP ; DUG 2 ; { CDR ; CDR ; CAR } ; IF { PUSH string \"WrongCondition: ~ self.data.paused\" ; FAILWITH } {} ; DUP ; ITER { DIG 2 ; DUP ; DUG 3 ; { CAR ; CAR } ; SENDER ; COMPARE ; EQ ; IF { PUSH bool True } { DUP ; CAR ; SENDER ; COMPARE ; EQ } ; IF { PUSH bool True } { DIG 2 ; DUP ; DUG 3 ; { CDR ; CAR ; CDR } ; SENDER ; DIG 2 ; DUP ; DUG 3 ; CAR ; PAIR %owner %operator ; MEM } ; IF {} { PUSH string \"WrongCondition: ((sp.sender == self.data.administrator) | (transfer.from_ == sp.sender)) | (self.data.operators.contains(sp.record(operator = sp.sender, owner = transfer.from_)))\" ; FAILWITH } ; DUP ; CDR ; ITER { DUP ; { CDR ; CDR } ; PUSH nat 0 ; COMPARE ; LT ; IF {} { PUSH string \"TRANSFER_OF_ZERO\" ; FAILWITH } ; DUP ; { CDR ; CDR } ; DIG 4 ; DUP ; DUG 5 ; { CAR ; CDR ; CDR } ; DIG 2 ; DUP ; DUG 3 ; { CDR ; CAR } ; DIG 4 ; DUP ; DUG 5 ; CAR ; PAIR ; GET ; { IF_NONE { PUSH string \"Get-item:190\" ; FAILWITH } {} } ; COMPARE ; GE ; IF {} { PUSH string \"WrongCondition: self.data.ledger[(transfer.from_, tx.token_id)].balance >= tx.amount\" ; FAILWITH } ; DIG 3 ; DUP ; DUG 4 ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CAR } ; DIG 7 ; DUP ; DUG 8 ; CAR ; PAIR ; DUP ; DUG 2 ; GET ; { IF_NONE { PUSH string \"set_in_top-any\" ; FAILWITH } {} } ; DROP ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CDR } ; DIG 9 ; { CAR ; CDR ; CDR } ; DIG 7 ; DUP ; DUG 8 ; { CDR ; CAR } ; DIG 9 ; DUP ; DUG 10 ; CAR ; PAIR ; GET ; { IF_NONE { PUSH string \"Get-item:190\" ; FAILWITH } {} } ; SUB ; ISNAT ; { IF_NONE { PUSH unit Unit ; FAILWITH } {} } ; SOME ; SWAP ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; PAIR ; DUG 3 ; DIG 3 ; DUP ; DUG 4 ; { CAR ; CDR ; CDR } ; SWAP ; DUP ; DUG 2 ; { CDR ; CAR } ; DIG 2 ; DUP ; DUG 3 ; CAR ; PAIR ; MEM ; IF { DIG 3 ; DUP ; DUG 4 ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DUP ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CAR } ; DIG 6 ; DUP ; DUG 7 ; CAR ; PAIR ; DUP ; DUG 2 ; GET ; { IF_NONE { PUSH string \"set_in_top-any\" ; FAILWITH } {} } ; DROP ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CDR } ; DIG 9 ; { CAR ; CDR ; CDR } ; DIG 7 ; DUP ; DUG 8 ; { CDR ; CAR } ; DIG 8 ; DUP ; DUG 9 ; CAR ; PAIR ; GET ; { IF_NONE { PUSH string \"Get-item:190\" ; FAILWITH } {} } ; ADD ; SOME ; SWAP ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; PAIR ; DUG 3 } { DIG 3 ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; DUP ; CAR ; SWAP ; CDR ; DIG 4 ; DUP ; DUG 5 ; { CDR ; CDR } ; SOME ; DIG 5 ; DUP ; DUG 6 ; { CDR ; CAR } ; DIG 6 ; DUP ; DUG 7 ; CAR ; PAIR ; UPDATE ; SWAP ; PAIR ; SWAP ; PAIR ; PAIR ; DUG 3 } ; DROP } ; DROP } ; DROP } { DUP ; ITER { DUP ; IF_LEFT { DROP ; DUP ; SENDER ; SWAP ; IF_LEFT {} { DROP ; PUSH unit Unit ; FAILWITH } ; CAR ; COMPARE ; EQ ; IF { PUSH bool True } { DIG 2 ; DUP ; DUG 3 ; { CAR ; CAR } ; SENDER ; COMPARE ; EQ } ; IF {} { PUSH string \"WrongCondition: (update.open_variant('add_operator').owner == sp.sender) | (sp.sender == self.data.administrator)\" ; FAILWITH } ; DIG 2 ; DUP ; DUG 3 ; DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; PUSH (option unit) (Some Unit) ; DIG 5 ; DUP ; DUG 6 ; IF_LEFT {} { DROP ; PUSH unit Unit ; FAILWITH } ; CDR ; DIG 6 ; DUP ; DUG 7 ; IF_LEFT {} { DROP ; PUSH unit Unit ; FAILWITH } ; DIG 9 ; DROP ; CAR ; PAIR %owner %operator ; UPDATE ; SWAP ; PAIR ; PAIR ; SWAP ; PAIR ; DUG 2 } { DROP ; DUP ; SENDER ; SWAP ; IF_LEFT { DROP ; PUSH unit Unit ; FAILWITH } {} ; CAR ; COMPARE ; EQ ; IF { PUSH bool True } { DIG 2 ; DUP ; DUG 3 ; { CAR ; CAR } ; SENDER ; COMPARE ; EQ } ; IF {} { PUSH string \"WrongCondition: (update.open_variant('remove_operator').owner == sp.sender) | (sp.sender == self.data.administrator)\" ; FAILWITH } ; DIG 2 ; DUP ; DUG 3 ; DUP ; CAR ; SWAP ; CDR ; DUP ; CDR ; SWAP ; CAR ; DUP ; CAR ; SWAP ; CDR ; NONE unit ; DIG 5 ; DUP ; DUG 6 ; IF_LEFT { DROP ; PUSH unit Unit ; FAILWITH } {} ; CDR ; DIG 6 ; DUP ; DUG 7 ; IF_LEFT { DROP ; PUSH unit Unit ; FAILWITH } {} ; DIG 9 ; DROP ; CAR ; PAIR %owner %operator ; UPDATE ; SWAP ; PAIR ; PAIR ; SWAP ; PAIR ; DUG 2 } ; DROP } ; DROP } ; NIL operation } } ; PAIR } ;`;\n            const storage = `( Pair ( Pair \"${administrator}\" ( Pair 0 { } ) ) ( Pair ( Pair Unit { } ) ( Pair ${pause ? 'True' : 'False'} { Elt ${tokenid} ( Pair ( Pair ${tokenid} ( Pair \"${symbol}\" ( Pair \"${name}\" ( Pair ${scale} { } ) ) ) ) ${supply} ) } ) ) )`;\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractOriginationOperation(server, signer, keystore, 0, undefined, fee, freight, gas, contract, storage, TezosTypes.TezosParameterFormat.Michelson);\n            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult['operationGroupID']);\n        });\n    }\n    MultiAssetTokenHelper.deployContract = deployContract;\n    function getSimpleStorage(server, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);\n            return {\n                administrator: jsonpath_plus_1.JSONPath({ path: '$.args[0].args[0].string', json: storageResult })[0],\n                tokens: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].args[1].args[0].int', json: storageResult })[0]),\n                balanceMap: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].args[1].args[1].int', json: storageResult })[0]),\n                operatorMap: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[0].args[1].int', json: storageResult })[0]),\n                paused: (jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[0].prim', json: storageResult })[0]).toString().toLowerCase().startsWith('t'),\n                metadataMap: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[1].int', json: storageResult })[0]),\n            };\n        });\n    }\n    MultiAssetTokenHelper.getSimpleStorage = getSimpleStorage;\n    function getTokenDefinition(server, mapid, token = 0) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(token, 'nat'), 'hex'));\n            const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n            if (mapResult === undefined) {\n                throw new Error(`Map ${mapid} does not contain a record for token ${token}`);\n            }\n            return {\n                tokenid: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].args[0].int', json: mapResult })[0]),\n                symbol: jsonpath_plus_1.JSONPath({ path: '$.args[0].args[1].args[0].string', json: mapResult })[0],\n                name: jsonpath_plus_1.JSONPath({ path: '$.args[0].args[1].args[1].args[0].string', json: mapResult })[0],\n                scale: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].args[1].args[1].args[1].args[0].int', json: mapResult })[0]),\n                supply: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].int', json: mapResult })[0])\n            };\n        });\n    }\n    MultiAssetTokenHelper.getTokenDefinition = getTokenDefinition;\n    function activate(server, address, signer, keystore, fee, gas = 800000, freight = 20000) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entryPoint = 'set_pause';\n            const parameters = 'False';\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, address, 0, fee, freight, gas, entryPoint, parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    MultiAssetTokenHelper.activate = activate;\n    function deactivate(server, address, signer, keystore, fee, gas = 800000, freight = 20000) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entryPoint = 'set_pause';\n            const parameters = 'True';\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, address, 0, fee, freight, gas, entryPoint, parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    MultiAssetTokenHelper.deactivate = deactivate;\n    function changeAdministrator(server, address, signer, keystore, fee, administrator, gas = 800000, freight = 20000) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entryPoint = 'set_administrator';\n            const parameters = `\"${administrator}\"`;\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, address, 0, fee, freight, gas, entryPoint, parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    MultiAssetTokenHelper.changeAdministrator = changeAdministrator;\n    function mint(server, address, signer, keystore, fee, destination, balance, symbol, tokenid, gas = 800000, freight = 20000) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entryPoint = 'mint';\n            const parameters = `(Pair (Pair \"${destination}\" ${balance}) (Pair \"${symbol}\" ${tokenid}))`;\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, address, 0, fee, freight, gas, entryPoint, parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    MultiAssetTokenHelper.mint = mint;\n    function transfer(server, address, signer, keystore, fee, source, transfers, gas = 800000, freight = 20000) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entryPoint = 'transfer';\n            const parameters = `{ Pair \"${source}\" { ${transfers.map(t => '( Pair \"' + t.address + '\" ( Pair ' + t.tokenid + ' ' + t.balance + ' ) )').join(' ; ')} } }`;\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, address, 0, fee, freight, gas, entryPoint, parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    MultiAssetTokenHelper.transfer = transfer;\n    function getAccountBalance(server, mapid, account, tokenid) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accountHex = `0x${TezosMessageUtil_1.TezosMessageUtils.writeAddress(account)}`;\n            const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(`(Pair ${accountHex} ${tokenid})`, '', TezosTypes.TezosParameterFormat.Michelson), 'hex'));\n            const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n            if (mapResult === undefined) {\n                throw new Error(`Map ${mapid} does not contain a record for ${account}/${tokenid}`);\n            }\n            const jsonresult = jsonpath_plus_1.JSONPath({ path: '$.int', json: mapResult });\n            return Number(jsonresult[0]);\n        });\n    }\n    MultiAssetTokenHelper.getAccountBalance = getAccountBalance;\n})(MultiAssetTokenHelper = exports.MultiAssetTokenHelper || (exports.MultiAssetTokenHelper = {}));\n//# sourceMappingURL=MultiAssetTokenHelper.js.map"]},"metadata":{},"sourceType":"script"}