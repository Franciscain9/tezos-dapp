{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst GeneratePassword = __importStar(require(\"generate-password\"));\n\nconst conseiljs_1 = require(\"conseiljs\");\n\nconst CryptoUtils_1 = require(\"./utils/CryptoUtils\");\n\nclass SoftSigner {\n  constructor(secretKey, validity = -1, passphrase = '', salt) {\n    this._secretKey = secretKey;\n    this._lockTimout = validity;\n    this._passphrase = passphrase;\n    this._salt = salt ? salt : Buffer.alloc(0);\n    this._unlocked = validity < 0;\n    this._key = Buffer.alloc(0);\n\n    if (validity < 0) {\n      this._key = secretKey;\n    }\n  }\n\n  getSignerCurve() {\n    return conseiljs_1.SignerCurve.ED25519;\n  }\n\n  static createSigner(secretKey, validity = 60) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (validity >= 0) {\n        const passphrase = GeneratePassword.generate({\n          length: 32,\n          numbers: true,\n          symbols: true,\n          lowercase: true,\n          uppercase: true\n        });\n        const salt = yield CryptoUtils_1.CryptoUtils.generateSaltForPwHash();\n        secretKey = yield CryptoUtils_1.CryptoUtils.encryptMessage(secretKey, passphrase, salt);\n        return new SoftSigner(secretKey, validity, passphrase, salt);\n      } else {\n        return new SoftSigner(secretKey);\n      }\n    });\n  }\n\n  getKey() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._unlocked) {\n        const k = yield CryptoUtils_1.CryptoUtils.decryptMessage(this._secretKey, this._passphrase, this._salt);\n\n        if (this._lockTimout == 0) {\n          return k;\n        }\n\n        this._key = k;\n        this._unlocked = true;\n\n        if (this._lockTimout > 0) {\n          setTimeout(() => {\n            this._key = Buffer.alloc(0);\n            this._unlocked = false;\n          }, this._lockTimout * 1000);\n        }\n\n        return this._key;\n      }\n\n      return this._key;\n    });\n  }\n\n  signOperation(bytes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return CryptoUtils_1.CryptoUtils.signDetached(conseiljs_1.TezosMessageUtils.simpleHash(bytes, 32), yield this.getKey());\n    });\n  }\n\n  signText(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const messageSig = yield CryptoUtils_1.CryptoUtils.signDetached(Buffer.from(message, 'utf8'), yield this.getKey());\n      return conseiljs_1.TezosMessageUtils.readSignatureWithHint(messageSig, 'edsig');\n    });\n  }\n\n  signTextHash(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const messageHash = conseiljs_1.TezosMessageUtils.simpleHash(Buffer.from(message, 'utf8'), 32);\n      const messageSig = yield CryptoUtils_1.CryptoUtils.signDetached(messageHash, yield this.getKey());\n      return conseiljs_1.TezosMessageUtils.readSignatureWithHint(messageSig, 'edsig');\n    });\n  }\n\n}\n\nexports.SoftSigner = SoftSigner;","map":{"version":3,"sources":["../src/SoftSigner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,gBAAA,GAAA,YAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,MAAA,aAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AAKA,MAAa,UAAb,CAAuB;AAenB,EAAA,WAAA,CAAoB,SAApB,EAAuC,QAAA,GAAmB,CAAC,CAA3D,EAA8D,UAAA,GAAqB,EAAnF,EAAuF,IAAvF,EAAoG;AAChG,SAAK,UAAL,GAAkB,SAAlB;AACA,SAAK,WAAL,GAAmB,QAAnB;AACA,SAAK,WAAL,GAAmB,UAAnB;AACA,SAAK,KAAL,GAAa,IAAI,GAAG,IAAH,GAAU,MAAM,CAAC,KAAP,CAAa,CAAb,CAA3B;AAEA,SAAK,SAAL,GAAiB,QAAQ,GAAG,CAA5B;AACA,SAAK,IAAL,GAAY,MAAM,CAAC,KAAP,CAAa,CAAb,CAAZ;;AAEA,QAAI,QAAQ,GAAG,CAAf,EAAkB;AACd,WAAK,IAAL,GAAY,SAAZ;AACH;AACJ;;AAEM,EAAA,cAAc,GAAA;AACjB,WAAO,WAAA,CAAA,WAAA,CAAY,OAAnB;AACH;;AAEM,SAAa,YAAb,CAA0B,SAA1B,EAA6C,QAAA,GAAmB,EAAhE,EAAkE;;AACrE,UAAI,QAAQ,IAAI,CAAhB,EAAmB;AACf,cAAM,UAAU,GAAG,gBAAgB,CAAC,QAAjB,CAA0B;AAAE,UAAA,MAAM,EAAE,EAAV;AAAc,UAAA,OAAO,EAAE,IAAvB;AAA6B,UAAA,OAAO,EAAE,IAAtC;AAA4C,UAAA,SAAS,EAAE,IAAvD;AAA6D,UAAA,SAAS,EAAE;AAAxE,SAA1B,CAAnB;AACA,cAAM,IAAI,GAAG,MAAM,aAAA,CAAA,WAAA,CAAY,qBAAZ,EAAnB;AACA,QAAA,SAAS,GAAG,MAAM,aAAA,CAAA,WAAA,CAAY,cAAZ,CAA2B,SAA3B,EAAsC,UAAtC,EAAkD,IAAlD,CAAlB;AACA,eAAO,IAAI,UAAJ,CAAe,SAAf,EAA0B,QAA1B,EAAoC,UAApC,EAAgD,IAAhD,CAAP;AACH,OALD,MAKO;AACH,eAAO,IAAI,UAAJ,CAAe,SAAf,CAAP;AACH;AACJ,K;AAAA;;AAEa,EAAA,MAAM,GAAA;;AAChB,UAAI,CAAC,KAAK,SAAV,EAAqB;AACjB,cAAM,CAAC,GAAG,MAAM,aAAA,CAAA,WAAA,CAAY,cAAZ,CAA2B,KAAK,UAAhC,EAA4C,KAAK,WAAjD,EAA8D,KAAK,KAAnE,CAAhB;;AACA,YAAI,KAAK,WAAL,IAAoB,CAAxB,EAA2B;AACvB,iBAAO,CAAP;AACH;;AAED,aAAK,IAAL,GAAY,CAAZ;AACA,aAAK,SAAL,GAAiB,IAAjB;;AACA,YAAI,KAAK,WAAL,GAAmB,CAAvB,EAA0B;AACtB,UAAA,UAAU,CAAC,MAAK;AACZ,iBAAK,IAAL,GAAY,MAAM,CAAC,KAAP,CAAa,CAAb,CAAZ;AACA,iBAAK,SAAL,GAAiB,KAAjB;AACH,WAHS,EAGP,KAAK,WAAL,GAAmB,IAHZ,CAAV;AAIH;;AACD,eAAO,KAAK,IAAZ;AACH;;AAED,aAAO,KAAK,IAAZ;AACH,K;AAAA;;AAQY,EAAA,aAAa,CAAC,KAAD,EAAc;;AACpC,aAAO,aAAA,CAAA,WAAA,CAAY,YAAZ,CAAyB,WAAA,CAAA,iBAAA,CAAkB,UAAlB,CAA6B,KAA7B,EAAoC,EAApC,CAAzB,EAAkE,MAAM,KAAK,MAAL,EAAxE,CAAP;AACH,K;AAAA;;AAQY,EAAA,QAAQ,CAAC,OAAD,EAAgB;;AACjC,YAAM,UAAU,GAAG,MAAM,aAAA,CAAA,WAAA,CAAY,YAAZ,CAAyB,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,MAArB,CAAzB,EAAuD,MAAM,KAAK,MAAL,EAA7D,CAAzB;AAEA,aAAO,WAAA,CAAA,iBAAA,CAAkB,qBAAlB,CAAwC,UAAxC,EAAoD,OAApD,CAAP;AACH,K;AAAA;;AAQY,EAAA,YAAY,CAAC,OAAD,EAAgB;;AACrC,YAAM,WAAW,GAAG,WAAA,CAAA,iBAAA,CAAkB,UAAlB,CAA6B,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,MAArB,CAA7B,EAA2D,EAA3D,CAApB;AACA,YAAM,UAAU,GAAG,MAAM,aAAA,CAAA,WAAA,CAAY,YAAZ,CAAyB,WAAzB,EAAsC,MAAM,KAAK,MAAL,EAA5C,CAAzB;AAEA,aAAO,WAAA,CAAA,iBAAA,CAAkB,qBAAlB,CAAwC,UAAxC,EAAoD,OAApD,CAAP;AACH,K;AAAA;;AAlGkB;;AAAvB,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst GeneratePassword = __importStar(require(\"generate-password\"));\nconst conseiljs_1 = require(\"conseiljs\");\nconst CryptoUtils_1 = require(\"./utils/CryptoUtils\");\nclass SoftSigner {\n    constructor(secretKey, validity = -1, passphrase = '', salt) {\n        this._secretKey = secretKey;\n        this._lockTimout = validity;\n        this._passphrase = passphrase;\n        this._salt = salt ? salt : Buffer.alloc(0);\n        this._unlocked = validity < 0;\n        this._key = Buffer.alloc(0);\n        if (validity < 0) {\n            this._key = secretKey;\n        }\n    }\n    getSignerCurve() {\n        return conseiljs_1.SignerCurve.ED25519;\n    }\n    static createSigner(secretKey, validity = 60) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (validity >= 0) {\n                const passphrase = GeneratePassword.generate({ length: 32, numbers: true, symbols: true, lowercase: true, uppercase: true });\n                const salt = yield CryptoUtils_1.CryptoUtils.generateSaltForPwHash();\n                secretKey = yield CryptoUtils_1.CryptoUtils.encryptMessage(secretKey, passphrase, salt);\n                return new SoftSigner(secretKey, validity, passphrase, salt);\n            }\n            else {\n                return new SoftSigner(secretKey);\n            }\n        });\n    }\n    getKey() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._unlocked) {\n                const k = yield CryptoUtils_1.CryptoUtils.decryptMessage(this._secretKey, this._passphrase, this._salt);\n                if (this._lockTimout == 0) {\n                    return k;\n                }\n                this._key = k;\n                this._unlocked = true;\n                if (this._lockTimout > 0) {\n                    setTimeout(() => {\n                        this._key = Buffer.alloc(0);\n                        this._unlocked = false;\n                    }, this._lockTimout * 1000);\n                }\n                return this._key;\n            }\n            return this._key;\n        });\n    }\n    signOperation(bytes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return CryptoUtils_1.CryptoUtils.signDetached(conseiljs_1.TezosMessageUtils.simpleHash(bytes, 32), yield this.getKey());\n        });\n    }\n    signText(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const messageSig = yield CryptoUtils_1.CryptoUtils.signDetached(Buffer.from(message, 'utf8'), yield this.getKey());\n            return conseiljs_1.TezosMessageUtils.readSignatureWithHint(messageSig, 'edsig');\n        });\n    }\n    signTextHash(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const messageHash = conseiljs_1.TezosMessageUtils.simpleHash(Buffer.from(message, 'utf8'), 32);\n            const messageSig = yield CryptoUtils_1.CryptoUtils.signDetached(messageHash, yield this.getKey());\n            return conseiljs_1.TezosMessageUtils.readSignatureWithHint(messageSig, 'edsig');\n        });\n    }\n}\nexports.SoftSigner = SoftSigner;\n//# sourceMappingURL=SoftSigner.js.map"]},"metadata":{},"sourceType":"script"}