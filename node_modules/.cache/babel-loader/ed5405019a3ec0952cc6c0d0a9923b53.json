{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\n\nconst TezosTypes = __importStar(require(\"../../../../types/tezos/TezosChainTypes\"));\n\nconst TezosMessageUtil_1 = require(\"../../TezosMessageUtil\");\n\nconst TezosNodeReader_1 = require(\"../../TezosNodeReader\");\n\nconst TezosNodeWriter_1 = require(\"../../TezosNodeWriter\");\n\nconst TezosContractUtils_1 = require(\"../TezosContractUtils\");\n\nvar ChainlinkTokenHelper;\n\n(function (ChainlinkTokenHelper) {\n  function verifyDestination(server, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return TezosContractUtils_1.TezosContractUtils.verifyDestination(server, address, 'cdf4fb6303d606686694d80bd485b6a1');\n    });\n  }\n\n  ChainlinkTokenHelper.verifyDestination = verifyDestination;\n\n  function verifyScript(script) {\n    return TezosContractUtils_1.TezosContractUtils.verifyScript(script, '000');\n  }\n\n  ChainlinkTokenHelper.verifyScript = verifyScript;\n\n  function getSimpleStorage(server, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);\n      return {\n        administrator: jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[0].string',\n          json: storageResult\n        })[0],\n        tokens: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[1].args[0].int',\n          json: storageResult\n        })[0]),\n        balanceMap: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].args[1].args[1].int',\n          json: storageResult\n        })[0]),\n        operatorMap: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[0].args[1].int',\n          json: storageResult\n        })[0]),\n        paused: jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[0].prim',\n          json: storageResult\n        })[0].toString().toLowerCase().startsWith('t'),\n        metadataMap: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[1].int',\n          json: storageResult\n        })[0])\n      };\n    });\n  }\n\n  ChainlinkTokenHelper.getSimpleStorage = getSimpleStorage;\n\n  function getTokenDefinition(server, mapid, token = 0) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(token, 'nat'), 'hex'));\n      const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n\n      if (mapResult === undefined) {\n        throw new Error(`Map ${mapid} does not contain a record for token ${token}`);\n      }\n\n      return {\n        tokenid: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[0].int',\n          json: mapResult\n        })[0]),\n        symbol: jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[0].string',\n          json: mapResult\n        })[0],\n        name: jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[0].string',\n          json: mapResult\n        })[0],\n        scale: Number(jsonpath_plus_1.JSONPath({\n          path: '$.args[1].args[1].args[1].args[0].int',\n          json: mapResult\n        })[0])\n      };\n    });\n  }\n\n  ChainlinkTokenHelper.getTokenDefinition = getTokenDefinition;\n\n  function transfer(server, address, signer, keystore, fee, source, transfers, gas = 200000, freight = 1000) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const entryPoint = 'transfer';\n      const parameters = `{ Pair \"${source}\" { ${transfers.map(t => `(Pair \"${t.address}\" (Pair ${t.tokenid}  ${t.balance}))`).join(' ; ')} } }`;\n      const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, address, 0, fee, freight, gas, entryPoint, parameters, TezosTypes.TezosParameterFormat.Michelson);\n      return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n    });\n  }\n\n  ChainlinkTokenHelper.transfer = transfer;\n\n  function getAccountBalance(server, mapid, account) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accountHex = `0x${TezosMessageUtil_1.TezosMessageUtils.writeAddress(account)}`;\n      const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(`${accountHex}`, '', TezosTypes.TezosParameterFormat.Michelson), 'hex'));\n      const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n\n      if (mapResult === undefined) {\n        throw new Error(`Map ${mapid} does not contain a record for ${account}`);\n      }\n\n      const jsonresult = jsonpath_plus_1.JSONPath({\n        path: '$.int',\n        json: mapResult\n      });\n      return Number(jsonresult[0]);\n    });\n  }\n\n  ChainlinkTokenHelper.getAccountBalance = getAccountBalance;\n})(ChainlinkTokenHelper = exports.ChainlinkTokenHelper || (exports.ChainlinkTokenHelper = {}));","map":{"version":3,"sources":["../../../../../src/chain/tezos/contracts/tzip12/ChainlinkTokenHelper.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonpath_plus_1 = require(\"jsonpath-plus\");\nconst TezosTypes = __importStar(require(\"../../../../types/tezos/TezosChainTypes\"));\nconst TezosMessageUtil_1 = require(\"../../TezosMessageUtil\");\nconst TezosNodeReader_1 = require(\"../../TezosNodeReader\");\nconst TezosNodeWriter_1 = require(\"../../TezosNodeWriter\");\nconst TezosContractUtils_1 = require(\"../TezosContractUtils\");\nvar ChainlinkTokenHelper;\n(function (ChainlinkTokenHelper) {\n    function verifyDestination(server, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return TezosContractUtils_1.TezosContractUtils.verifyDestination(server, address, 'cdf4fb6303d606686694d80bd485b6a1');\n        });\n    }\n    ChainlinkTokenHelper.verifyDestination = verifyDestination;\n    function verifyScript(script) {\n        return TezosContractUtils_1.TezosContractUtils.verifyScript(script, '000');\n    }\n    ChainlinkTokenHelper.verifyScript = verifyScript;\n    function getSimpleStorage(server, address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const storageResult = yield TezosNodeReader_1.TezosNodeReader.getContractStorage(server, address);\n            return {\n                administrator: jsonpath_plus_1.JSONPath({ path: '$.args[0].args[0].string', json: storageResult })[0],\n                tokens: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].args[1].args[0].int', json: storageResult })[0]),\n                balanceMap: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].args[1].args[1].int', json: storageResult })[0]),\n                operatorMap: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[0].args[1].int', json: storageResult })[0]),\n                paused: (jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[0].prim', json: storageResult })[0]).toString().toLowerCase().startsWith('t'),\n                metadataMap: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[1].int', json: storageResult })[0]),\n            };\n        });\n    }\n    ChainlinkTokenHelper.getSimpleStorage = getSimpleStorage;\n    function getTokenDefinition(server, mapid, token = 0) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(token, 'nat'), 'hex'));\n            const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n            if (mapResult === undefined) {\n                throw new Error(`Map ${mapid} does not contain a record for token ${token}`);\n            }\n            return {\n                tokenid: Number(jsonpath_plus_1.JSONPath({ path: '$.args[0].int', json: mapResult })[0]),\n                symbol: jsonpath_plus_1.JSONPath({ path: '$.args[1].args[0].string', json: mapResult })[0],\n                name: jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[0].string', json: mapResult })[0],\n                scale: Number(jsonpath_plus_1.JSONPath({ path: '$.args[1].args[1].args[1].args[0].int', json: mapResult })[0]),\n            };\n        });\n    }\n    ChainlinkTokenHelper.getTokenDefinition = getTokenDefinition;\n    function transfer(server, address, signer, keystore, fee, source, transfers, gas = 200000, freight = 1000) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entryPoint = 'transfer';\n            const parameters = `{ Pair \"${source}\" { ${transfers.map(t => `(Pair \"${t.address}\" (Pair ${t.tokenid}  ${t.balance}))`).join(' ; ')} } }`;\n            const nodeResult = yield TezosNodeWriter_1.TezosNodeWriter.sendContractInvocationOperation(server, signer, keystore, address, 0, fee, freight, gas, entryPoint, parameters, TezosTypes.TezosParameterFormat.Michelson);\n            return TezosContractUtils_1.TezosContractUtils.clearRPCOperationGroupHash(nodeResult.operationGroupID);\n        });\n    }\n    ChainlinkTokenHelper.transfer = transfer;\n    function getAccountBalance(server, mapid, account) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accountHex = `0x${TezosMessageUtil_1.TezosMessageUtils.writeAddress(account)}`;\n            const packedKey = TezosMessageUtil_1.TezosMessageUtils.encodeBigMapKey(Buffer.from(TezosMessageUtil_1.TezosMessageUtils.writePackedData(`${accountHex}`, '', TezosTypes.TezosParameterFormat.Michelson), 'hex'));\n            const mapResult = yield TezosNodeReader_1.TezosNodeReader.getValueForBigMapKey(server, mapid, packedKey);\n            if (mapResult === undefined) {\n                throw new Error(`Map ${mapid} does not contain a record for ${account}`);\n            }\n            const jsonresult = jsonpath_plus_1.JSONPath({ path: '$.int', json: mapResult });\n            return Number(jsonresult[0]);\n        });\n    }\n    ChainlinkTokenHelper.getAccountBalance = getAccountBalance;\n})(ChainlinkTokenHelper = exports.ChainlinkTokenHelper || (exports.ChainlinkTokenHelper = {}));\n//# sourceMappingURL=ChainlinkTokenHelper.js.map"]},"metadata":{},"sourceType":"script"}